#include <iostream>
#include <stdexcept>                          // catch run-time errors
using namespace std ;

/******************************
 *                            *
 *  Template for Node class   *
 *                            *
 ******************************/
template<class T>
class Node {
    public:
        T data ;                // value or object stored in the node
        Node<T> *next ;         // pointer to the next node

    // No-arg constructor
    Node() {
        next = nullptr  ;
    }

    // Constructor with one parameter
    Node(T myData) {
        this->data = myData ;   // stores value in node's data field
        next = nullptr ;
    }
} ;

/*****************************************
 *                                       *
 *   Template for the LinkedList class   *
 *                                       *
 *****************************************/
template<class T>
class LinkedList {

    public:
        Node<T> *head, *tail ;         // pointers to first and last nodes
        int size ;                       // number of nodes in this list

        // Prototypes of functions already present
       /* LinkedList() ;                           // constructor

        void addFirst(T myData) ;                // add an element to the list
        void addLast(T myData) ;
        void add(int index, T myData) ;

        T getFirst() ;                           // accessors
        T getLast() ;
        T get(int index) ;
        int indexOf(T myData) ;
        int getSize() ;
        bool isEmpty() ;

        T removeFirst() throw (runtime_error) ;  // remove an element or clear
        T removeLast() throw (runtime_error) ;
        void clear() ;

        // Function prototypes to be provided in this lab
        bool contains(T myData) ;
        int lastIndexOf(T myData) ;
        bool remove(T myData) ;
        T removeAt(int index) ;
        bool set(int index, T myData) ;
        void display() ;
        */
//} ;

/************************************
*                                   *
*     Function implementations      *
*                                   *
*************************************/

// Constructor
//template<typename T>
LinkedList() {                    // An empty list
    head = tail = nullptr ;
    size = 0 ;
}

// Add node to beginning of the list
//template<typename T>
void addFirst(T myData) {
    Node<T> *newNode = new Node<T>(myData) ;    // Create new node and ptr
    newNode->next = head ;                      // Assign value of head ptr to next ptr of new node
    head = newNode ;                            // Set head to point at new node
    size++ ;                                    // increment size of LinkedList

    if (tail == nullptr)
        tail = head ;                           // set tail ptr to new node if list was empty
}

// Add node to the end of the list
//template<typename T>
void addLast(T myData) {
    if (tail == nullptr) {                      // list is empty
        head = tail = new Node<T>(myData) ;     // point head and tail to new node
    } else {
        tail->next = new Node<T>(myData) ;      // create new node
        tail = tail->next ;                     // set tail ptr to new node
    }

    size++ ;
}

// Add node at specific index
//template<typename T>
void add(int index, T myData) {
    if (index == 0) {                           // add node at beginning of list
        addFirst(myData) ;
    } else if (index >= size) {                 // add node at end of list
        addLast(myData) ;
    } else {                                    // insert this element between two nodes
        Node<T> *current = head ;               // loop to node before this one
        for (int i = 1 ; i < index ; i++)
            current = current->next ;
        Node<T> *temp = current->next ;         // one after this one
        current->next = new Node<T>(myData) ;
        (current->next)->next = temp ;
        size++ ;
    }
}

// Get data from first node
//template<typename T>
T getFirst() {
    if (size == 0) {
        throw runtime_error("Index out of range") ; // no nodes in the list
    } else {
        return head->data ;                     //retrieve value in first node
    }
}

// Get data from last node
//template<typename T>
T getLast() {                    // no nodes in the list
    if (size == 0) {
        throw runtime_error("Index out of range") ; // retrieve value in last node
    } else {
        return tail->data ;
    }
}

// Get node at the specific index
//template<typename T>
T get(int index) {
    if (index < 0 || index > size - 1)
        throw runtime_error("Index out of range") ;

    Node<T> *current = head ;                // walk list
    for (int i = 0 ; i < index ; i++)
        current = current->next ;            // point to next node

    return current->data ;                   // get value if found
}

// Get the index of a specific node
//template<typename T>
int indexOf(T myData) {
    Node<T> *current = head ;
    for (int i = 0 ; i < size ; i++) {
        if (current->data == myData)        // walk list to find value
            return i ;
        current = current->next ;
    }
    return -1 ;                             // return -1 if value not found
}


// Get the number of nodes in the list (number added - number removed)
//template<typename T>
int getSize() {
    return size ;
}

// Remove first node from list
//template<typename T>
T removeFirst() throw (runtime_error) {
    if (size == 0) {
        throw runtime_error("No nodes in the list") ;
    } else {
        Node<T> *temp = head ;             // create new ptr temp - point to same place as head
        head = head->next ;                // point to the next object beyond the first
        size-- ;
        if (head == nullptr) {
            tail = nullptr ;
        }
        T myData = temp->data ;
        delete temp ;                      // delete node temp is pointing to
        return myData ;                    // may or may not use this value
    }
}

// Remove last node from the list
//template<typename T>
T removeLast() throw (runtime_error) {
    if (size == 0) {
        throw runtime_error("No nodes in the list") ;
    } else if (size == 1) {
        Node<T> *temp = head ;
        head = tail = nullptr ;
        size = 0 ;
        T myData = temp->data ;
        delete temp ;                          // delete node temp is pointing to
        return myData ;                        // may or may not use this value
    } else {
        Node<T> *current = head ;              // set current to point at what head points at
        for (int i = 0 ; i < size - 2 ; i++)   // walk list moving current ptr to end
            current = current->next ;

        Node<T> *temp = tail ;
        tail = current ;
        tail->next = nullptr ;
        size-- ;
        T myData = temp->data ;
        delete temp ;
        return myData ;
    }
}

// Clear the list - takes time but frees up memory
//template<typename T>
void clear() {
    while (head != nullptr) {          // if still a node in list
        Node<T> *temp = head ;         // set temp ptr to what head points at
        head = head->next ;            // point head at next node
        delete temp ;                  // delete the node temp is pointing to
    }
    head = tail = nullptr ;            // the empty list
    size = 0 ;
}

// See if the list is empty
//template<typename T>
bool isEmpty() {
    cout << "in isEmpty(), size is now " << size ;
    return head == nullptr ;                   // no nodes in list
}
//template<typename T>
void display(){
	Node<T> *current = head ;  
	Node<T> *beg = head;
	if(head == nullptr){
		cout<<"List is empty"<<endl;
	}else{
		while (head != nullptr) {          // if still a node in list
        	cout<<head->data<<" ";
        	head = head->next ;            // point head at next node
    	}
	}
	cout<<"\n";
	head = beg;
}
//template<typename T>
bool remove(T myData) throw (runtime_error){
	 Node<T> *current = head ;   
	 Node<T> *beg = head;      
    for (int i = 0 ; i < size ; i++){
    	if(head->next->data == myData){
    		head->next = head->next->next;
    		size--;
    		head = beg;
    		return true;
		}
		head = head->next ;
	}
	head = beg;
	return false;
}
//template<typename T>
T removeAt(int index) throw (runtime_error){
	if(index < 0 || index > size){
		throw runtime_error("Index of out of bounds");
	}
	Node<T> *current = head;
	Node<T> *beg = head;
	for(int i = 0; i < this->size; i++){
		if(i + 1 == index){
			Node<T> *temp = head->next;
    		head->next = head->next->next;
    		size--;
    		head = beg;
    		return temp->data;
		}
		current = current->next;
	}
	return 0;
}
//template<typename T>
bool set(int index, T myData){
	Node<T> *current = head;
	Node<T> *beg = head;
	for(int i = 0; i < this->size; i++){
		if(i == index){
			head->data = myData;
			head = beg;
			return true;
		}
		head = head->next;
	}
	head = beg;
	return false;
}
//template<typename T>
int lastIndexOf(T myData){
	Node<T> *current = head;
	Node<T> *beg = head;
	for(int i = 0; i < this->size; i++){
		if(head->data == myData){
			head = beg;
			return i;
		}
		head = head->next;
	}
	head = beg;
	return -1;
}
//template<typename T>
bool contains(T myData){
	Node<T> *current = head;
	Node<T> *beg = head;
	while(head != nullptr){
		if(head->data == myData){
			head = beg;
			return true;
		}
		head = head->next;
	}
	head = beg;
	return false;
}
};
int main(){
	LinkedList<string> myList;
	myList.addFirst("fifth");
	myList.addFirst("fourth");
	myList.addFirst("third");	
	myList.addFirst("second");
	myList.addFirst("first");
	myList.display();
	myList.remove("fifth");
	cout<<"List after removing fifth"<<endl;
	myList.display();
	myList.removeAt(1);
	cout<<"List after removing index 1"<<endl;
	myList.display();
	myList.set(0,"new node");
	cout<<"List after setting index 0's data to - *new node*"<<endl;
	myList.display();
	cout<<"What's the last index of *third*?"<<endl;
	cout<<myList.lastIndexOf("third")<<endl;
	cout<<"Does this list contain *third*"<<" 0 for false, 1 for true: "<<myList.contains("third")<<endl;
	
}

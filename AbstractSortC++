/*Bryan Miller
Goal: Demonstrate sorting array, inheritance, and class abstraction using virtual function
Algorithim: See comments below
*/
#include <iostream>
using namespace std;
class AbstractSort{
	public:
		//initalize int class member
		AbstractSort(int numCompare){
			this->numCompare = numCompare;
		}
	int numCompare = 0;
	//Declare prototype sort using header virtual function = 0
	virtual void sort(int arr [ ], int size ) = 0 ;
	//declare and define swap function, increment numCompare every time this function is called
	void swap(int *that, int *other)  
	{  
		numCompare++;
    	int temp = *that;  
    	*that = *other;  
    	*other = temp;  
	}  
	//getters and setters for class member
	void setCompare(int numCompare){
		this->numCompare = numCompare;
	}
	int getCompare(){
		return numCompare;
	}
};
class OtherSort: public AbstractSort{
	public:
		//create two constructors
		OtherSort(int numComp) : AbstractSort(numComp){
			setCompare(numComp);
		}
		OtherSort() : AbstractSort(0){ }
	//define sort function
	virtual void sort(int arr[], int size){
		int n = size;
    	int i, j, min_idx;  
    	for (i = 0; i < n-1; i++)  
    	{   
        	min_idx = i;  
        	for (j = i+1; j < n; j++){
        		if (arr[j] < arr[min_idx]){
        		 	min_idx = j;
				}   
        		swap(&arr[min_idx], &arr[i]);  
    		}
    	}
    	//when loop is done running display number of comparisons and each number in ascending order
    	cout<<"Number of comparisons performed: "<<numCompare<<endl;
    	cout<<"Sorted array in ascending order: "<<endl;
    	for(int i = 0; i < size; i++){
    		cout<<"Element: "<<i<<" value: "<<arr[i]<<endl;
		}
	}
};
int main(){
	OtherSort sortObject;	//no argument constrcutor no parentheses needed	
	int array[] = {2,5,6,14,12,15,40,33,26};
	int size = sizeof(array)/sizeof(array[0]);
	cout<<"Array before calling sort: "<<endl;
	for(int i = 0; i < size; i++){
		cout<<"Element: "<<i<<" value: "<<array[i]<<endl;
	}
	sortObject.sort(array, size);
}
